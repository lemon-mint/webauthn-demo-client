let cid="";const new_credential=(a,b,c)=>{let d={publicKey:{rp:{name:a,id:window.location.host.split(":")[0]},challenge:new Uint8Array(32),user:{id:new Uint8Array(16),name:b,displayName:c},pubKeyCredParams:[{type:"public-key",alg:-7}],timeout:6e4,attestation:"none",extensions:{uvm:!0,exts:!0},authenticatorSelection:{userVerification:"preferred",requireResidentKey:!1},excludeCredentials:[]}};return navigator.credentials.create(d)},usekey=async(a,b)=>{const c=await navigator.credentials.get({publicKey:{challenge:hex2arr(a),userVerification:"preferred",allowCredentials:[{id:hex2arr(b),type:"public-key",transports:["usb","nfc","internal","ble"]}],timeout:6e4}});return console.log("authenticatorData:",arr2hex(c.response.authenticatorData)),console.log("clientDataJSON:",arr2hex(c.response.clientDataJSON)),console.log("sig:",arr2hex(c.response.signature)),c};function newkey(a){var b=CBOR.decode(a.attestationObject),c=b.authData;const d=new DataView(new ArrayBuffer(2)),e=c.slice(53,55);e.forEach((a,b)=>d.setUint8(b,a));const f=d.getUint16(),g=c.slice(55,55+f),h=c.slice(55+f),i=CBOR.decode(h.buffer);console.log("credentialId:",arr2hex(g)),console.log("Publickey X:",arr2hex(i["-2"])),console.log("Publickey Y:",arr2hex(i["-3"])),cid=arr2hex(g)}function arr2hex(a){return Array.prototype.map.call(new Uint8Array(a),a=>("00"+a.toString(16)).slice(-2)).join("")}function hex2arr(a){return new Uint8Array(a.match(/.{1,2}/g).map(a=>parseInt(a,16)))}window.addEventListener("load",function(){let a=document.getElementById("credentials_create"),b=document.getElementById("credentials_get"),c=document.getElementById("sitename"),d=document.getElementById("username"),e=document.getElementById("displayname"),f=document.getElementById("challenge");a.addEventListener("click",()=>{let a=new_credential(c.value,d.value,e.value);a.then(function(a){attestationResponse=a.response,newkey(attestationResponse)})}),b.addEventListener("click",()=>{""!=cid&&usekey(f.value,cid)})});
